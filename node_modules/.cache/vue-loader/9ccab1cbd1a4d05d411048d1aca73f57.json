{"remainingRequest":"E:\\前端\\vue_wzz_music\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\前端\\vue_wzz_music\\src\\components\\findMusic\\PlayMusicPage\\PlayMusicDetailPage.vue?vue&type=style&index=0&id=377c629f&lang=less&scoped=true&","dependencies":[{"path":"E:\\前端\\vue_wzz_music\\src\\components\\findMusic\\PlayMusicPage\\PlayMusicDetailPage.vue","mtime":1598424998299},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5tdXNpY1Bvc3RlciB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBib3JkZXI6IDQ1cHggc29saWQgYmxhY2s7CiAgICBib3JkZXItcmFkaXVzOiAxMDAlOwogICAgYm94LXNoYWRvdzogMCAwIDVweCA1cHggZ3JheTsKICAgIHdpZHRoOiAyMDBweDsKICAgIGhlaWdodDogMjAwcHg7CiAgICB0b3A6IDEyMHB4OwogICAgbGVmdDogMjUwcHg7CiAgICB6LWluZGV4OiAtMTsKfQoKLnRvcEluZm8gewogICAgaGVpZ2h0OiA2MDBweDsKfQoKbGkgewogICAgbGlzdC1zdHlsZTogbm9uZTsKICAgIG1hcmdpbi10b3A6IDE1cHg7Cn0KCgo="},{"version":3,"sources":["PlayMusicDetailPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"PlayMusicDetailPage.vue","sourceRoot":"src/components/findMusic/PlayMusicPage","sourcesContent":["<template>\r\n    <div>\r\n        <!--头部的图片跟歌词-->\r\n        <el-row class=\"topInfo\">\r\n            <img :src=\"music.al.picUrl\"\r\n                 style=\"opacity: 0.4;border-radius: 25px;position: absolute;left: 220px;width:1000px;height: 600px;z-index: -1\"\r\n                 alt=\"\">\r\n            <el-col :offset=\"5\" :span=\"6\">\r\n                <el-image src=\"imgs/play-bar.png\" style=\"width: 120px;\"></el-image>\r\n                <el-image src=\"imgs/play-bar-middle.png\"\r\n                          style=\"position: absolute;top: -5px;left: 340px;width: 25px;height: 25px;z-index: 10\"></el-image>\r\n\r\n                <!--播放的歌曲的图片信息-->\r\n                <img :src=\"music.al.picUrl\" alt=\"\" class=\"musicPoster\">\r\n            </el-col>\r\n\r\n            <el-col :span=\"6\">\r\n                <h1 style=\"font-size: 25px;font-weight: 400\">{{music.name}}</h1>\r\n                <span>专辑: {{music.al.name}}</span>\r\n                <span style=\"margin-left: 15px;\">\r\n                    歌手:\r\n                    <span style=\"color: #4d99de;cursor: pointer\" @click=\"toSingerPage(music.ar[0].id)\">{{music.ar[0].name}}</span>\r\n                </span>\r\n                <!--歌词-->\r\n                <div style=\"width: 350px;height: 350px;overflow: hidden;margin-top: 25px;\">\r\n                    <div style=\"overflow-y: auto\">\r\n                        <ul ref=\"lyric\">\r\n                            <li v-for=\"(item, i) in lrcObject\"\r\n                                :style=\"{color: lyricIndex === i ? 'red' : 'black'}\">\r\n                                {{item.c}}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n            </el-col>\r\n        </el-row>\r\n\r\n        <!--底部评论信息-->\r\n        <el-main style=\"margin-top: 25px;margin-bottom: 75px;\">\r\n            <el-row>\r\n                <el-col :offset=\"3\" :span=\"15\">\r\n                    <h4 style=\"font-weight: 300\" v-if=\"queryInfo.offset === 0\">精彩评论</h4>\r\n                    <!--精彩评论的信息-->\r\n                    <div v-for=\"item in hotCommentList\"\r\n                         style=\"position: relative;border-top: 2px solid rgb(240,240,242);\r\n                 border-bottom: 1px solid rgb(240,240,242);padding: 15px 0;font-size: 15px;\">\r\n\r\n                        <div>\r\n                            <!--用户头像-->\r\n                            <img :src=\"item.user.avatarUrl\" alt=\"\"\r\n                                 style=\"display: inline;width: 50px;height: 50px;border-radius: 25px;\">\r\n\r\n                            <!--评论信息-->\r\n                            <div style=\"margin-left: 60px;margin-top: -60px;\">\r\n                                <p><span style=\"color: #4d99de;\">{{item.user.nickname}}</span>: {{item.content}}</p>\r\n\r\n                                <br v-if=\"item.beReplied.length > 0\">\r\n                                <!--子评论-->\r\n                                <div v-if=\"item.beReplied.length > 0\"\r\n                                     style=\"background-color: rgb(241,241,244);padding: 5px 5px;\">\r\n                                    <p v-for=\"citem in item.beReplied\"><span\r\n                                            style=\"color: #4d99de;\">{{citem.user.nickname}}</span>: {{citem.content}}\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <p style=\"display:block;font-size: 13px;color: gray;opacity: 0.7\">{{item.time |\r\n                                    dateFormat}}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <h4 style=\"font-weight: 300;margin-top: 25px;\">最新评论({{total}})</h4>\r\n                    <!--所有评论的信息-->\r\n                    <div v-for=\"item in commentList\"\r\n                         style=\"position: relative;border-top: 2px solid rgb(240,240,242);\r\n                 border-bottom: 1px solid rgb(240,240,242);padding: 15px 0;font-size: 15px;\">\r\n\r\n                        <div>\r\n                            <!--用户头像-->\r\n                            <img :src=\"item.user.avatarUrl\" alt=\"\"\r\n                                 style=\"display: inline;width: 50px;height: 50px;border-radius: 25px;\">\r\n\r\n                            <!--评论信息-->\r\n                            <div style=\"margin-left: 60px;margin-top: -60px;\">\r\n                                <p><span style=\"color: #4d99de;\">{{item.user.nickname}}</span>: {{item.content}}</p>\r\n\r\n                                <br v-if=\"item.beReplied.length > 0\">\r\n                                <!--子评论-->\r\n                                <div v-if=\"item.beReplied.length > 0\"\r\n                                     style=\"background-color: rgb(241,241,244);padding: 5px 5px;\">\r\n                                    <p v-for=\"citem in item.beReplied\"><span\r\n                                            style=\"color: #4d99de;\">@{{citem.user.nickname}}</span>: {{citem.content}}\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <p style=\"display:block;font-size: 13px;color: gray;opacity: 0.7\">{{item.time |\r\n                                    dateFormat}}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!--分页-->\r\n                    <el-pagination\r\n                            layout=\"prev, pager, next\"  :page-size=\"queryInfo.limit\"\r\n                            :total=\"total\" @current-change=\"handleCurrentChange\">\r\n                    </el-pagination>\r\n                </el-col>\r\n            </el-row>\r\n        </el-main>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                curId: this.$route.params.id,\r\n                //当前音乐的详细信息\r\n                music: {\r\n                    name,\r\n                    al: {\r\n                        picUrl: ''\r\n                    },\r\n                    ar: [\r\n                        {\r\n                            name: ''\r\n                        }\r\n                    ]\r\n                },\r\n                //当前歌词字符串\r\n                lrc: '',\r\n                //解析歌词为对象\r\n                lrcObject: [],\r\n                //当前音乐播放的进度条(从父组件中实时同步获取)\r\n                duration: '',\r\n                //当前歌词的所位于歌词对象中的索引值(用于帮助高亮)\r\n                lyricIndex: 0,\r\n                //旋转对象\r\n                rotate: null,\r\n                //旋转角度\r\n                deg: 0,\r\n                //是否在播放\r\n                play: this.isPlay,\r\n                //查询评论的信息\r\n                queryInfo: {\r\n                    id: this.$route.params.id,\r\n                    limit: 10,\r\n                    offset: 0,\r\n                },\r\n                //所有评论列表\r\n                commentList: [],\r\n                //最热评论列表\r\n                hotCommentList: [],\r\n                //评论总数\r\n                total: 0,\r\n            }\r\n        },\r\n        props: ['musicDuration', 'curId', 'isPlay'],\r\n        watch: {\r\n            //父组件通过 router-view 的@musicDuration传递过来值(进行歌曲滚动操作)\r\n            musicDuration(newVal) {\r\n                this.duration = newVal\r\n                //对每次进来的进度条进行判断\r\n                // 跟下一句台词时长是否匹配,如果匹配则当前高亮的索引值+1\r\n                //使用循环帮助****回退  快进****的判断\r\n                for (let i = 0; i < this.lrcObject.length; i++) {\r\n                    //这里使用小于符号判断是为了 保证回退音乐进度事件的效果实现性\r\n                    if (newVal <= parseFloat(this.lrcObject[i].t)) {\r\n                        if (this.lyricIndex === i - 1) {\r\n                            break\r\n                        }\r\n                        //找到比当前时间点 大一点的后一位的歌词的索引值\r\n                        this.lyricIndex = i - 1;\r\n                        //当前距离上方的距离  控制歌词上下滚动\r\n                        var currentTemp = this.$refs.lyric.style.marginTop\r\n                        currentTemp = currentTemp.substr(0, currentTemp.length - 2)\r\n                        //滚动距离\r\n                        currentTemp = parseInt(currentTemp)\r\n                        if (i > 5) {//第五句歌词之后 开始使用定位\r\n                            /**\r\n                             * 例子\r\n                             * 第一句 margin-top 25px\r\n                             * 第二句 margin-top 50px\r\n                             * 第三句 margin-top 75px;\r\n                             * 以此类推\r\n                             *  ***计算出给一句歌词一个距离顶部的一个距离\r\n                             *  (每次只需要切换到当前距离顶部的位置 实现歌词滚动)\r\n                             *  顶部的位置 = 当前高亮歌词索引 * 25 +'px'   ***\r\n                             * @type {number}\r\n                             */\r\n                            currentTemp = (i - 5) * -35\r\n                            //设置样式\r\n                            this.$refs.lyric.style.marginTop = currentTemp + 'px'\r\n                        }\r\n                        //如果当前是最后一句歌词 代表歌曲要放送结束了 将我们的lyricIndex(当前歌词索引值还原成0便于下一曲使用)\r\n                        if (this.lyricIndex === this.lrcObject.length - 1) {\r\n                            this.lyricIndex = 0;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            //监测curId变化\r\n            curId(newVal) {\r\n                this.curId = newVal\r\n            },\r\n            //监测当前的播放状态\r\n            isPlay(newVal) {\r\n                if (!newVal) {//如果当前是在暂停状态\r\n                    window.clearInterval(this.rotate)\r\n                } else {\r\n                    this.rotate = window.setInterval(() => {\r\n                        this.$('.musicPoster').eq(0).css('transform', 'rotate(' + this.deg + 'deg)');\r\n                        this.deg += 1;\r\n                    }, 30)\r\n                }\r\n            }\r\n        },\r\n        created() {\r\n            //获取音乐的详细信息\r\n            this.getMusicDetail(this.$route.params.id)\r\n            //获取歌曲的歌词\r\n            this.getMusicLrc()\r\n            //注册监听的事件 在main.js中定义了\r\n            window.addEventListener('setItem', () => {\r\n                this.curId = parseInt(localStorage.getItem('curPlayMusicId'))\r\n                this.getMusicDetail(this.curId)\r\n                this.getMusicLrc()\r\n            })\r\n            //查询该歌曲的评论信息\r\n            this.getMusicComment()\r\n        },\r\n        mounted() {\r\n            //dom元素加载完毕后,设置ul默认的向上样式\r\n            this.$refs.lyric.style.marginTop = '-10px'\r\n            //如果当前是在播放的时候 开始旋转\r\n            if (this.play) {\r\n                this.rotate = window.setInterval(() => {\r\n                    this.$('.musicPoster').eq(0).css('transform', 'rotate(' + this.deg + 'deg)');\r\n                    this.deg += 1;\r\n                }, 30)\r\n            }\r\n        },\r\n        beforeRouteLeave(to, form, next) {\r\n            window.clearInterval(this.rotate)\r\n            this.rotate = null\r\n            next()\r\n        },\r\n        methods: {\r\n            //根据id获取音乐详情\r\n            getMusicDetail(musicId) {\r\n                this.$http.get('song/detail', {params: {ids: musicId}}).then(res => {\r\n                    this.music = res.data.songs[0]\r\n                })\r\n            },\r\n            //获取歌词\r\n            getMusicLrc() {\r\n                this.$http.get('lyric', {params: {id: this.curId}}).then(res => {\r\n                    //获取歌词\r\n                    this.lrc = res.data.lrc.lyric\r\n                    //解析歌词\r\n                    this.createLrcObj(this.lrc);\r\n                })\r\n            },\r\n            //解析歌词\r\n            createLrcObj(lrc) {\r\n                var oLRC = {\r\n                    ms: [] //歌词数组{t:时间,c:歌词}\r\n                };\r\n                if (lrc.length == 0) return;\r\n                var lrcs = lrc.split('\\n');//用回车拆分成数组\r\n                for (var i in lrcs) {//遍历歌词数组\r\n                    lrcs[i] = lrcs[i].replace(/(^\\s*)|(\\s*$)/g, \"\"); //去除前后空格\r\n                    var t = lrcs[i].substring(lrcs[i].indexOf(\"[\") + 1, lrcs[i].indexOf(\"]\"));//取[]间的内容\r\n                    var s = t.split(\":\");//分离:前后文字\r\n                    if (isNaN(parseInt(s[0]))) { //不是数值\r\n                        for (var i in oLRC) {\r\n                            if (i != \"ms\" && i == s[0].toLowerCase()) {\r\n                                oLRC[i] = s[1];\r\n                            }\r\n                        }\r\n                    } else { //是数值\r\n                        var arr = lrcs[i].match(/\\[(\\d+:.+?)\\]/g);//提取时间字段，可能有多个\r\n                        var start = 0;\r\n                        for (var k in arr) {\r\n                            start += arr[k].length; //计算歌词位置\r\n                        }\r\n                        var content = lrcs[i].substring(start);//获取歌词内容\r\n                        for (var k in arr) {\r\n                            var t = arr[k].substring(1, arr[k].length - 1);//取[]间的内容\r\n                            // var t = arr[k]\r\n                            var s = t.split(\":\");//分离:前后文字\r\n                            oLRC.ms.push({//对象{t:时间,c:歌词}加入ms数组\r\n                                // t: t,\r\n                                t: (parseFloat(s[0]) * 60 + parseFloat(s[1])).toFixed(3),\r\n                                c: content === '' ? '..............' : content\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                oLRC.ms.sort(function (a, b) {//按时间顺序排序\r\n                    return a.t - b.t;\r\n                });\r\n                // for(var i in oLRC){ //查看解析结果\r\n                //     console.log(i,\":\",oLRC[i]);\r\n                // }\r\n                this.lrcObject = oLRC.ms\r\n            },\r\n            //点击歌手名跳转歌手详细页面\r\n            toSingerPage(id) {\r\n                this.$router.push('/singer/' + id)\r\n            },\r\n            //查询评论\r\n            getMusicComment() {\r\n                this.$http.get('comment/music', {params: this.queryInfo}).then(res => {\r\n                    if (res.data.code !== 200) return this.$message.error('获取评论数据失败!')\r\n                    this.commentList = res.data.comments\r\n                    this.hotCommentList = res.data.hotComments\r\n                    this.total = res.data.total\r\n                })\r\n            },\r\n            //分页插件页数改变\r\n            handleCurrentChange(newPage) {\r\n                this.queryInfo.offset = (newPage - 1) * this.queryInfo.limit\r\n                this.getMusicComment();\r\n            },\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .musicPoster {\r\n        position: absolute;\r\n        border: 45px solid black;\r\n        border-radius: 100%;\r\n        box-shadow: 0 0 5px 5px gray;\r\n        width: 200px;\r\n        height: 200px;\r\n        top: 120px;\r\n        left: 250px;\r\n        z-index: -1;\r\n    }\r\n\r\n    .topInfo {\r\n        height: 600px;\r\n    }\r\n\r\n    li {\r\n        list-style: none;\r\n        margin-top: 15px;\r\n    }\r\n\r\n\r\n</style>\r\n"]}]}