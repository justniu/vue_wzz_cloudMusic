{"remainingRequest":"E:\\前端\\vue_wzz_music\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\前端\\vue_wzz_music\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\前端\\vue_wzz_music\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\前端\\vue_wzz_music\\src\\components\\Main.vue?vue&type=template&id=54d3a52e&scoped=true&","dependencies":[{"path":"E:\\前端\\vue_wzz_music\\src\\components\\Main.vue","mtime":1598076444992},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\前端\\vue_wzz_music\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}